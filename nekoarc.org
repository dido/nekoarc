NEKOARC ROADMAP
Copyright (C) 2019 Rafael R. Sevilla
----------------------------------------------------------------------
Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
----------------------------------------------------------------------

* The Arc Runtime
** DONE base virtual machine [8/8]
    - [X] Define virtual machine architecture
    - [X] Design interpreter core
    - [X] Build code generation infrastructure
    - [X] Implement virtual machine instructions [43/43]
      - [X] nop
      - [X] push
      - [X] pop
      - [X] ldl
      - [X] ldi
      - [X] ldg
      - [X] ldlp
      - [X] ldip
      - [X] ldgp
      - [X] stg
      - [X] lde
      - [X] lde0
      - [X] ldep
      - [X] lde0p
      - [X] ste
      - [X] ste0
      - [X] cont
      - [X] env
      - [X] envr
      - [X] apply
      - [X] ret
      - [X] jmp
      - [X] jt
      - [X] jf
      - [X] jbnd
      - [X] true
      - [X] nil
      - [X] no
      - [X] hlt
      - [X] add
      - [X] sub
      - [X] mul
      - [X] div
      - [X] cons
      - [X] car
      - [X] cdr
      - [X] scar
      - [X] scdr
      - [X] is
      - [X] dup
      - [X] cls
      - [X] consr
      - [X] menv
    - [X] Environments [2/2]
      - [X] Stack-based
      - [X] Heap-based

	We use what Clinger et. al. call the stack/heap strategy.
	Environments and continuations normally go on the stack, but
	may be moved to the heap if required, e.g. when a closure or
	continuation is required to outlive its initial context.
	Environments can have their lives extended if one of
	these things happens:

        1. A function returns with a closure in its value register
	2. A closure is stored in the global environment
        3. A closure is stored in an environment other than at level 0.
    - [X] Continuations [2/2]
	  Heap-based continuations are required to support ccc.
      - [X] Stack-based
      - [X] Heap-based
    - [X] Foreign function interface
    - [X] Type invocations [5/5]
      - [X] procedure
      - [X] list
      - [X] vector
      - [X] table
      - [X] string
** DONE Arc reader [9/12]
   - [-] Lists [2/3]
     - [X] Ordinary Lists
     - [X] Improper lists
     - [ ] Sharpsign Equal-Sign Lists
   - [ ] Vectors
   - [ ] Hash Tables
   - [X] Bracketed functions
   - [X] Quotes
   - [X] Quasiquotes
   - [X] Comma expressions (unquote)
   - [X] Strings
   - [X] Runes
   - [X] Comments
   - [X] Symbols
   - [X] Numbers [2/2]
     - [X] Integer
     - [X] Flonum
** TODO Arc compiler [0/5]
   - [ ] Literal expressions [0/9]
     - [ ] nil
     - [ ] true (t)
     - [ ] character
     - [ ] string
     - [ ] fixnum
     - [ ] bignum
     - [ ] flonum
     - [ ] rational
     - [ ] complex
   - [ ] Symbols [0/2]
     - [ ] Environment symbols
     - [ ] Global symbols
   - [ ] Lists [0/3]
     - [ ] Special forms [0/8]
       - [ ] if
       - [ ] fn [0/5]
	 - [ ] single symbol arguments
	 - [ ] simple argument lists
	 - [ ] optional arguments
         - [ ] rest arguments
	 - [ ] destructuring binds
       - [ ] quote
       - [ ] quasiquote
       - [ ] assign
       - [ ] compose in a functional position
       - [ ] complement in a functional position
       - [ ] andf in a functional position
     - [ ] Inline functions [0/7]
       - [ ] cons
       - [ ] car
       - [ ] cdr
       - [ ] +
       - [ ] -
       - [ ] *
       - [ ] /
     - [ ] Function applications
   - [ ] Macros
   - [ ] Special Syntax [0/4]
     - [ ] Compose (:)
     - [ ] Complement (~)
     - [ ] Structure access (. and !)
     - [ ] And (&)
** DONE basic data types [17/17]
    - [X] Nil
    - [X] True
    - [X] Numeric Types [2/2]
      - [X] fixnum
      - [X] flonum
    - [X] Runes
    - [X] Strings
    - [X] Symbols
    - [X] Conses
    - [X] Tables
    - [X] Vectors
    - [X] Tagged
    - [X] Functions
    - [X] Input Ports [2/2]
      - [X] instring
      - [X] infile
    - [X] Output Ports [2/2]
      - [X] outstring
      - [X] outfile
    - [X] Threads
    - [X] Exceptions
    - [X] Channels
    - [X] Closures (code)
** TODO Runtime Built-In Functions [8/19]
   Consider whether or not to provide instructions for the asterisked
   functions, so as to make their use cheaper.
   - [X] Initialization for binding runtime primitives to global symbols
   - [X] Type handling [5/5]
     - [X] coerce [8/8]
       - [X] Fixnum conversions [4/4]
	 - [X] fixnum (trivial)
         - [X] flonum
         - [X] string
         - [X] rune
       - [X] Flonum conversions [3/3]
	 - [X] flonum (trivial)
	 - [X] fixnum
	 - [X] string
       - [X] Rune conversions [3/3]
         - [X] rune (trivial)
	 - [X] fixnum
	 - [X] string
       - [X] String conversions [6/6]
         - [X] string (trivial)
	 - [X] fixnum (only if string is an integer)
         - [X] flonum (only if string can be parsed to a flonum)
	 - [X] symbol (same as intern)
	 - [X] cons (converted into a list of characters)
         - [X] vector (converted into a vector of characters)
       - [X] Symbol conversions [2/2]
         - [X] symbol -> symbol (trivial)
         - [X] string
       - [X] Cons conversions [3/3]
         - [X] cons (trivial)
	 - [X] string
         - [X] vector
       - [X] Table conversions [2/2]
         - [X] table (trivial)
         - [X] string
       - [X] Vector conversions [3/3]
         - [X] vector (trivial)
	 - [X] cons
         - [X] string
     - [X] type
     - [X] annotate
     - [X] rep
     - [X] sym
   - [X] Predicates [8/8]
     - [X] Less-than (<) *
     - [X] Greater-than (>) *
     - [X] Less-than or equal (<=) *
     - [X] Greater-than or equal (>=) *
     - [X] spaceship operator (<=>) * (Arcueid extension)
     - [X] exact
     - [X] is
     - [X] iso
   - [X] List operations [7/7]
     - [X] car
     - [X] cdr
     - [X] cadr
     - [X] cddr
     - [X] cons
     - [X] scar
     - [X] scdr
   - [-] Math operations [0/4]
     - [-] Arithmetic [1/5]
       - [ ] * Multiplication
       - [X] + Addition
       - [ ] - Subtraction
       - [ ] / Division
       - [ ] div - integer division (extension)
     - [ ] Complex arithmetic [0/4]
	   This is again an Arcueid extension.  It's rather annoying
	   to have support for complex numbers but no functions to
	   manipulate them.
       - [ ] real
       - [ ] imag
       - [ ] conj
       - [ ] arg -- complex argument
     - [ ] Arc3-current functions [0/6]
       - [ ] expt
       - [ ] mod
       - [ ] rand
       - [ ] srand
       - [ ] sqrt
       - [ ] trunc
     - [ ] C99 math.h functions (Arcueid only) [0/37]
	   These functions should support complex arguments in as far
	   as it makes sense to do so.
       - [ ] abs -- works for all numeric types
       - [ ] acos
       - [ ] acosh
       - [ ] asin
       - [ ] asinh
       - [ ] atan
       - [ ] atan2
       - [ ] atanh
       - [ ] cbrt
       - [ ] ceil
       - [ ] cos
       - [ ] cosh
       - [ ] erf
       - [ ] erfc
       - [ ] exp
       - [ ] expm1
       - [ ] floor
       - [ ] fmod
       - [ ] frexp
       - [ ] hypot
       - [ ] ldexp
       - [ ] lgamma
       - [ ] log
       - [ ] log10
       - [ ] log2
       - [ ] logb
       - [ ] modf
       - [ ] nan
       - [ ] nearbyint
       - [ ] pow (alias for expt)
       - [ ] sin
       - [ ] sinh
       - [ ] sqrt (also in arc3)
       - [ ] tan
       - [ ] tanh
       - [ ] tgamma
       - [ ] trunc (also in arc3)
   - [X] Table operations [2/2]
     - [X] maptable
     - [X] table
   - [ ] Evaluation [0/4]
     - [ ] eval
     - [ ] apply
     - [ ] ssexpand
     - [ ] ssyntax
   - [ ] Macros [0/4]
     - [ ] macex
     - [ ] macex1
     - [ ] sig
	   This is actually a global variable, and needs to be
	   assigned at initialization.	   
     - [ ] uniq
   - [X] Basic I/O primitives [5/5]
         These are the base I/O functions provided by the Arcueid C
         runtime.
     - [X] Input [4/4]
       - [X] readb
       - [X] readc
       - [X] peekc
	     Implemented in terms of ungetc
       - [X] ungetc - this is not part of standard Arc
	   Note that there is no ungetb function.  This is proving a
	   little tricky to implement.  Maybe what we should do is
	   simplify the semantics of ungetc so that it requires a
	   character to be unget'd, and the next call to readc OR
	   readb (yes, readb with a 'b'!) will return this
	   CHARACTER.  This saves us the trouble of decoding UTF-8
	   all over again, and reinforces the maxim of never mixing
	   the b functions with the c functions.
     - [X] Output [2/2]
       - [X] writeb
       - [X] writec
     - [X] File I/O [3/3]
       - [X] infile
       - [X] outfile
       - [X] close
     - [X] String port I/O [3/3]
	   Note that doing readb/writeb or readc/writec on a string
	   port have the same effect.  Strings are made up of Unicode
	   characters so it would be quite messy to implement a
	   separate 'byte index' into what is made up of characters.
       - [X] instring
       - [X] outstring
       - [X] inside
     - [X] Seeking / telling [2/2]
             Note that these essential functions are not available in
             PG-Arc for some reason but will probably be necessary to
             implement CIEL.
       - [X] seek
       - [X] tell
   - [ ] Additional I/O functions (src/io.c) [0/8]
         These other I/O functions are defined in standard Arc but are not
         necessary for CIEL or the reader, so we do them later.
     - [ ] pipe-from
     - [ ] stdin
     - [ ] stdout
     - [ ] stderr
     - [ ] call-w/stdin
     - [ ] call-w/stdout
     - [ ] disp
     - [ ] flushout
   - [ ] Threads [0/2]
     - [ ] Creating and managing threads [0/8]
       - [ ] new-thread (spawn)
       - [ ] break-thread
       - [ ] kill-thread
       - [ ] current-thread
       - [ ] dead
       - [ ] sleep
       - [ ] atomic-invoke - implemented using channels
       - [ ] join-thread (not in standard Arc)
     - [ ] Channels (cf. Limbo and CSP, Arcueid extension) [0/3]
       - [ ] chan
       - [ ] <- (recv-channel) *
       - [ ] <-= (send-channel) *
   - [ ] File system operations [0/5]
     - [ ] dir
     - [ ] dir-exists
     - [ ] file-exists
     - [ ] rmfile
     - [ ] mvfile
   - [-] Error handling and continuations [5/8]
     - [X] details
     - [X] err
     - [X] on-err
     - [X] ccc
     - [X] dynamic-wind
     - [ ] ccmark
     - [ ] scmark
     - [ ] cmark
   - [X] Strings [1/1]
     - [X] newstring
   - [ ] Objects [0/3]
     - [ ] obj
     - [ ] clone
     - [ ] slot
   - [ ] Time [0/5]
     - [ ] current-gc-milliseconds
     - [ ] current-process-milliseconds
     - [ ] msec
     - [ ] seconds
     - [ ] timedate
   - [ ] Regular Expressions (Arcueid extension) [0/3]
     - [ ] regular expression input in the reader
     - [ ] regular expression matching [0/2]
       - [ ] Basic matching
       - [ ] Substring captures
     - [ ] regcomp (compile a regular expression from a string)
   - [ ] Miscellaneous OS operations [0/4]
     - [ ] system
     - [ ] quit
     - [ ] setuid
     - [ ] memory
   - [X] Miscellaneous [3/3]
     - [X] sref *
     - [X] len
     - [X] bound
** TODO Baseline environment (arc.arc) [0/2]
   - [ ] Load all arc.arc functions
   - [ ] Test behaviour of all arc.arc functions
** TODO pretty printer [0/2]
   - [ ] Framework for disp and write
   - [-] Printers for various types [14/17]
     - [X] nil
     - [X] t
     - [X] Numeric Types [2/2]
       - [X] Fixnums
       - [X] Flonums
     - [X] Runes
     - [X] Strings
     - [X] Symbols
     - [X] Conses
     - [ ] Tables
     - [X] Vectors
     - [X] Tagged
     - [X] Functions
     - [X] Input Ports
     - [X] Output Ports
     - [X] Threads
     - [X] Exceptions
     - [ ] Channels
** TODO CIEL [6/17]
   The CIEL dump/restore functionality allows NekoArc to save and load
   workspaces by tracing the global symbol table and threads and dumping
   those to a file.
   - [X] gnil
     Push a nil onto the stack
   - [X] gtrue
     Push the true symbol onto the stack
   - [X] gfix
     Push a fixnum onto the stack
   - [X] gflo
     Push a flonum onto the stack
   - [X] grune
     Push a rune onto the stack
   - [X] gstr
     Push a string onto the stack
   - [ ] gsym
     Push a symbol onto the stack
   - [ ] gcode
     Push a code object onto the stack
   - [ ] gclos
     Push a closure onto the stack
   - [ ] genv
     Push an environment onto the stack
   - [ ] gcont
     Push a continuation onto the stack
   - [ ] ccons
     Cons the two objects on the stack and push the result
   - [ ] cann
     Annotate the the top of stack with the one below it and push the result
   - [ ] gvec
     Create a vector of a certain length and push on the stack
   - [ ] gtab
     Create an empty table and put it on the stack
   - [ ] xset
     Set the value of a cons or a vector
   - [ ] xtset
     Store a key-value pair into a table

